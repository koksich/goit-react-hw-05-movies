{"version":3,"file":"static/js/736.3218c281.chunk.js","mappings":"kTAEMA,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAmB,mCAAG,WAAMC,GAAN,uFACRF,EAAAA,EAAAA,IAAA,oCAAuCD,EAAvC,iBAAuDG,IAD/C,cACzBC,EADyB,yBAExBA,EAASC,KAAKC,SAFU,2CAAH,sDAKnBC,EAAiB,mCAAG,WAAOC,EAAOL,GAAd,gFACvBM,EAAe,IAAIC,gBAAgB,CACvCC,QAASX,EACTY,SAAU,QACVT,KAAMA,EACNU,eAAe,EACfC,MAAON,IANoB,SASNP,EAAAA,EAAAA,IAAA,wBAA2BQ,IATrB,cASvBL,EATuB,yBAUtBA,EAASC,MAVa,2CAAH,wDAajBU,EAAc,mCAAG,WAAMC,GAAN,uFACHf,EAAAA,EAAAA,IAAA,iBAAoBe,EAApB,oBAAkChB,EAAlC,qBADG,cACpBI,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKdY,EAAc,mCAAG,WAAMD,GAAN,uFACHf,EAAAA,EAAAA,IAAA,iBAAoBe,EAApB,4BAA0ChB,EAA1C,qBADG,cACpBI,EADoB,yBAEnBA,EAASC,KAAKa,MAFK,2CAAH,sDAKdC,EAAiB,mCAAG,WAAMH,GAAN,gFACvBP,EAAe,IAAIC,gBAAgB,CACrCC,QAASX,EACTY,SAAU,QACVT,KAAM,IAJmB,SAMNF,EAAAA,EAAAA,IAAA,iBAAoBe,EAApB,oBAAkCP,IAN5B,cAMvBL,EANuB,yBAOtBA,EAASC,KAAKC,SAPQ,2CAAH,qD,iLC/BjBc,EAAOC,EAAAA,GAAAA,GAAH,6RAaJC,EAAMD,EAAAA,GAAAA,IAAH,gFAMHE,EAAOF,EAAAA,GAAAA,GAAH,sCAIJG,EAAYH,EAAAA,GAAAA,EAAH,+C,SC0BtB,EA1Ca,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACRD,GAAS,GAET,IAAME,EAAW,mCAAG,8GAEOhB,EAAAA,EAAAA,IAAeQ,GAFtB,OAGQ,KADlBrB,EAFU,QAGH8B,QAAcH,GAAS,GACpCF,EAAUzB,GAJM,gDAMhB2B,GAAS,GACTI,QAAQL,MAAM,KAAMM,SAPJ,yDAAH,qDAWjBH,GACD,GAAE,CAACR,KAGF,2BACGG,EAAOM,OAAS,IACf,SAACd,EAAD,UACGQ,EAAOS,KAAI,YAA4C,IAAzCrB,EAAwC,EAAxCA,GAAIsB,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACrC,OACE,2BACE,SAAClB,EAAD,CAAKmB,IA/BJ,mCA+BuBH,EAAcI,IAAKH,KAC3C,SAAChB,EAAD,UAAOgB,KACP,SAACf,EAAD,UAAYgB,MAHLxB,EAMZ,MAGJc,IAAS,SAACa,EAAA,EAAD,CAAaC,MAAM,0CAGlC,C,kFC/CYC,EAAOxB,EAAAA,GAAAA,IAAH,yHAOJyB,EAAOzB,EAAAA,GAAAA,EAAH,oF,SCOjB,EAZoB,SAAC,GAAe,IAAbuB,EAAY,EAAZA,MACrB,OACE,SAACC,EAAD,WACE,SAACC,EAAD,UAAOF,KAGZ,C","sources":["API/index.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/HandleError/HandleError.styled.jsx","components/HandleError/HandleError.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = '71d3c9744b233f536e82db6c03830bc2';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async page => {\n    const response = await axios.get(`/trending/all/day?api_key=${API_KEY}&page=${page}`);\n    return response.data.results;\n}\n\nexport const fetchSearchMovies = async (value, page) => {\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n      language: 'en-US',\n      page: page,\n      include_adult: false,\n      query: value,\n    });\n\n    const response = await axios.get(`/search/movie?${searchParams}`);\n    return response.data;\n}\n\nexport const fetchMovieData = async id => {\n    const response = await axios.get(`/movie/${id}?api_key=${API_KEY}&language=en-US'`);\n    return response.data;\n}\n \nexport const fetchMovieCast = async id => {\n    const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}&language=en-US'`);\n    return response.data.cast;\n}\n\nexport const fetchMovieReviews = async id => { \n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n        language: 'en-US',\n        page: 1,\n    })\n    const response = await axios.get(`/movie/${id}/reviews?${searchParams}`);\n    return response.data.results;\n\n}","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 20px);\n  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 20px 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 170px;\n  object-fit: cover;\n`;\n\nexport const Name = styled.h4`\n  margin: 0;\n`;\n\nexport const Character = styled.p`\n  margin: 20px 0 0 0;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchMovieCast } from 'API';\nimport HandleError from 'components/HandleError/HandleError';\nimport { List, Img, Character, Name } from './Cast.styled';\n\nconst API_URL_IMG = `https://image.tmdb.org/t/p/w300/`;\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    setError(false);\n\n    const fetchActors = async () => {\n      try {\n        const response = await fetchMovieCast(movieId);\n        if (response.length === 0) setError(true);\n        setActors(response);\n      } catch (error) {\n        setError(true);\n        console.error(error.message);\n      }\n    };\n\n    fetchActors();\n  }, [movieId]);\n\n  return (\n    <div>\n      {actors.length > 0 && (\n        <List>\n          {actors.map(({ id, profile_path, name, character }) => {\n            return (\n              <li key={id}>\n                <Img src={API_URL_IMG + profile_path} alt={name} />\n                <Name>{name}</Name>\n                <Character>{character}</Character>\n              </li>\n            );\n          })}\n        </List>\n      )}\n      {error && <HandleError title=\"Sorry, there is no cast information\" />}\n    </div>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Text = styled.p`\n  font-size: 15px;\n  line-height: 1.2;\n  color: #000000;\n`;\n\n","import PropTypes from 'prop-types';\n\nimport { Wrap, Text } from './HandleError.styled';\n\nconst HandleError = ({ title }) => {\n  return (\n    <Wrap>\n      <Text>{title}</Text>\n    </Wrap>\n  );\n};\n\nHandleError.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default HandleError;\n"],"names":["API_KEY","axios","fetchTrendingMovies","page","response","data","results","fetchSearchMovies","value","searchParams","URLSearchParams","api_key","language","include_adult","query","fetchMovieData","id","fetchMovieCast","cast","fetchMovieReviews","List","styled","Img","Name","Character","movieId","useParams","useState","actors","setActors","error","setError","useEffect","fetchActors","length","console","message","map","profile_path","name","character","src","alt","HandleError","title","Wrap","Text"],"sourceRoot":""}